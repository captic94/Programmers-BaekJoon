log4j를 이용하여 log를 파일로 남기기
-> log4j.xml의 appender의 class를 org.apache.log4j.ConsoleAppender에서 org.apache.log4j.FileSystem???으로 변경
 (더 공부해야한다)


@Data : set / get / equals / toString 을 갖는다
 ∴ @Data = @Setter + @Getter + @EqualsAndToString








Web project -> maven으로 변경 (tomcat server도 추가)
1. pom.xml에 spring mvc 5.1.5버전 dependency 추가

  <!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc -->
<dependency>
    <groupId>org.springframework</groupId>
    <artifactId>spring-webmvc</artifactId>
    <version>5.1.5.RELEASE</version>
</dependency>

2. web.xml에 DispatcherServlet으로 이동하는 servlet 생성

<servlet>
	<servlet-name>mvc</servlet-name>			// mvc 대신 다른 이름 써도 된다
  	<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>mvc</servlet-name>
  	<url-pattern>*.do</url-pattern>		// localhost/mvc/~~~.do로 하면 DispatcherServlet으로 간다
  </servlet-mapping>

	※  <load-on-startup> 1로 설정 : spring container 바로 실행 

3. servlet-name으로 설정한 이름으로 web-inf 폴더 안에 xml파일을 생성한다
예) mvc-servlet.xml
 -> servlet이름이 aaa면  aaa-servlet.xml

4. com.my.control 패키지 내에 TestController 클래스 생성	(Servlet아니다)
 - servlet.xml(configuration.xml)에 com.my.control을 component-scan + 클래스에 @Controller해주면
   Spring Container가 해당 클래스를 관리한다

5. TestController 내 메소드에 @RequestMapping(value = "path") Annotation을 달면 해당 path로 접근시 메소드 자동 실행
 - sevlet에 있던
 - 메소드의 접근뭐시기는 public이어야만 한다
 예) @RequestMapping(value = "/ronal.do")
	public void a() {
		System.out.println("a() 호출되었다");
	}


6. get 방식 전용 Annotation = @GetMapping , 요청 URL : http://localhost/mvc/c.do?t=hello&p=world&c=1
@GetMapping(value = "/c.do")
	public void c(String t, String p, int c) {
	System.out.println("c() 호출되었다 : t = " + t + ", p = " + p + ", c = " + c);
}


->
c() 호출되었다 : t = hello, p = world, c =  1


  6-1 요청 url에 동일한 id에 value가 많을 경우,  요청 URL : http://localhost/mvc/c.do?t=hello&p=world&c=1&c=2&c=3
   - 자료형에 해당하는 배열로 메서드의 파라미터를 변경시켜주면 된다
	public void c(String t, String p, int[] c) {
		System.out.print("c() 호출되었다 : t = " + t + ", p = " + p + ", c = ");
		for (int i : c) 
			System.out.print(" " + i);
		System.out.println();
	}

  ->
     c() 호출되었다 : t = hello, p = world, c =  1 2 3


   6-2 요청 url에 들어있는 쿼리 스트링과 파라미터가 1:1 대응이 안될 경우 (쿼리스트링이 빈다)
      요청 URL : http://localhost/mvc/c.do?t=hello&c=1&c=2&c=3
    - Null이 뜨더라

	public void c(String t, String p, int[] c) {
		System.out.print("c() 호출되었다 : t = " + t + ", p = " + p + ", c = ");
		for (int i : c) 
			System.out.print(" " + i);
		System.out.println();
	}


     -> 
      c() 호출되었다 : t = hello, p = null, c =  1 2 3


7. 파라미터 변수명과 쿼리스트링 id값이 불일치 할 경우, 요청 URL : http://192.168.0.115/mvc/d.do?first=hello&second=3

@GetMapping(value = "/d.do")
public void d(String a, int b) {
	System.out.println("d() 호출되었다 : a = " + a + ", b = " + b);
}


-> b에서 일치하지 않다고 에러 발생?

해결 : @RequestParam(name = "쿼리스트링id")을 추가

@GetMapping(value = "/d.do")
public void d(@RequestParam(name = "first")String a, @RequestParam(name = "second") int b) {
	System.out.println("d() 호출되었다 : a = " + a + ", b = " + b);
}


->
 d() 호출되었다 : a = hello, b = 3


  7-1. id값도 불일치한데 1:1대응도 안될 때 (수가 부족), 요청 URL : http://192.168.0.115/mvc/d.do?first=hello
  -> 에러 발생

    해결 : @RequestParam에 " requied  = false " 와 " defaultValue = "값" " 프로퍼티?를 추가한다

	@GetMapping(value = "/d.do")
	public void d(@RequestParam(name = "first")String a,
			@RequestParam(name = "second", required = false, defaultValue = "0") int b) {
		System.out.println("d() 호출되었다 : a = " + a + ", b = " + b);
	}

  ->
 d() 호출되었다 : a = hello, b = 0


 7-2. 쿼리스트링으로 객체의 멤버변수들을 보낼 때,
       요청URL : http://192.168.0.115/mvc/e.do?prod_no=C0001&prod_name=COFFEE&prod_price=1000

   @GetMapping("/e.do")
   public void e(Product p) {
   	System.out.println("e() 호출되었다 p = " + p);
   }


-> 
 e() 호출되었다 p = Product [prod_no=C0001, prod_name=COFFEE, prod_price=1000]
