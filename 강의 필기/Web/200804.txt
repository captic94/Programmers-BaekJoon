web.xml 파일에 에러페이지 등록하기
<web-app /> 안에 <error-page />를 작성하고 그 내부에
<exception-type /> 과 <location />을 작성한다

JSP 예외처리

--a.jsp 내용--
<%@ page errorPage="e.jsp"%>
<%
Date dt;
%><%=dt%>


--> dt 객체변수를 초기화하지 않았기 때문에 <%=dt%> 에서 에러가 발생한다

혹은
<%@ page errorPage="e.jsp"%>
<%
Date dt = new Date();
dt = null;
%><%=dt%>
<%=new SimpleDateFormat("yyyy").format(dt)%>

---> dt에 null이 들어갔기에 formatingException 혹은 nullpointerException이 발생


<%@ page errorPage="e.jsp"%>에 의해서 e.jsp로 간다?


---e.jsp
<%






p. 32
http 상태 코드별로 에러 페이지를 등록하는 방법
<web-app ...>
	<error-page>
		<error-code>404</error-code>
		<location>/NotFoundError.jsp</location>
	</error-page>
</web-app>









서블릿 라이클 사이클
객체 상태와 서블릿 상태
- init()이 호출되고 나서야 서블릿 상태가 된다
 = 서블릿으로서의 효과를 낼 수 있다(웹 브라우저의 요청을 처리할 수 있는 상태)
    (service메서드 호출)

서블릿 소멸 시 destroy() 호출


jsp도 jspInit() 과 jspDestroy()메서드가 있다
-> <%! %>를 이용하여 처음과 끝에 이 두 메서드를 오버라이드 할 수 있다


Chapter 6.
jsp 라이프 사이클?
 jsp 요청
 1. a_jsp.java 파일이 서버(예_ 아파치) work 디렉토리 내에 있는가 조회
    1-1. 없다면 : a_jsp.java 파일 생성(Generated) -> 컴파일
 2.  a_jsp.class 파일이 존재하는가 조회
    2-1. 없다면  a_jsp.class 파일 생성
 3. 객체가 존재한지 조회
    3-1. 객체생성, 생성자 호출, jspInit() 자동호출
 4. _jspService 자동호출


Chapter 7.
EL(Expression Language) : ${ }  ※ jQuery는 $( )
- ${pageScope} ( <%=pageContext.getAttribute("a")%> )
- ${requestScope} ( <%=request.getAttribute("a")%> )
- ${sessionScope} ( <%=session.getAttribute("a")%> )
- ${applicationScope} ( <%=application.getAttribute("a")%> / <%=getServletContext.getAttribute("a")%> )


- ${param.a} ( <%= request.getParameter("a") %>
  -> a가 null일 때 el은 빈 문자가, 익스프레스는 null이 출력된다

 a가 "1", b가 "2"일 경우
- ${param.a + param.b} = 3
  <%=requset.getParameter("a") + request.getParameter("b")%> = 12


${empty param.a ? "널" : param.a}
		=
<%=( (request.getParameter("a") == null ) || (request.getParameter("a").equals("") ) ? "널" : request.getParameter("a") %>



Chapter 10.
커스텀 액션 (사용자 정의 태그) 만들기

액션 태그
- standard action tag
 예) <jsp: include>
      <jsp: forward>
      <jsp: useBean>
      <jsp: setProperty>
      <jsp: getProperty>

--custom action tag (내가 새로 정의한 태그)
<%@ taglib prefix="my" uri="" %>
<
tld를 만들고 xml에 tld를 등록해야 한다

-------------------내가 만든 tld 파일(my.tld)--------------------
<?xml version="1.0" encoding="UTF-8"?>
<taglib xmlns="http://java.sun.com/xml/ns/j2ee"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd"
    version="2.0">
    <description>A tag library exercising SimpleTag handlers.</description>
    <tlib-version>1.0</tlib-version>
    <short-name>my</short-name> 	<!-- taglib prefix값에 들어갈 친구이다 -->
    <uri>http://localhost/back25/my-tag</uri>
    <tag>
        <description>Outputs Hello, World</description>
        <name>greeting</name>	<!-- tag에 들어갈 이름, jsp : 하고 이거치면 된다 -->
        <tag-class>com.my.tag.HelloWorldSimpleTag</tag-class>
        <body-content>empty</body-content>
    </tag>
</taglib>

-----------------------web.xml파일-------------------------------
.....

<jsp-config>
    <taglib>
      <taglib-uri>http://localhost/back25/my-tag</taglib-uri><!-- tld파일의 uri, taglib의 uri와 동일 -->
      <taglib-location>/my.tld</taglib-location><!-- tld파일의 위치 -->
    </taglib>
  </jsp-config>

.....



리스너 (Listener)
- delegate, EventDispatcher와 유사한 기능
- 아래 내용들에 대해서 listener 사용 가능
 ServletContext(생성,소멸/ attr 변경)
 HttpSession(생성,소멸/ attr 변경 / session이주?migration / Object Binding)
 ServletRequest(생성,소멸 / attr 변경)

- 리스너 생성시 web.xml에 <listener> 태그 자동 추가







web.xml에 설정 vs init에 설정
web.xml에 설정해놓으면 한 눈에 알아볼 수 있다 근데 그만큼 xml이 길어지면 관리하기 넘모 어렵다